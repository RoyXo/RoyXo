Index: text_6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/text_6.py b/text_6.py
new file mode 100644
--- /dev/null	(date 1645818311677)
+++ b/text_6.py	(date 1645818311677)
@@ -0,0 +1,58 @@
+# 6. * Реализовать структуру данных «Товары».
+# Она должна представлять собой список кортежей.
+# Каждый кортеж хранит информацию об отдельном товаре.
+# В кортеже должно быть два элемента — номер товара и словарь с параметрами,
+# то есть характеристиками товара: название, цена, количество, единица измерения.
+# Структуру нужно сформировать программно, запросив все данные у пользователя.
+# Пример готовой структуры:
+#
+# [
+# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
+# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
+# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
+# ]
+#
+# Нужно собрать аналитику о товарах.
+# Реализовать словарь, в котором каждый ключ — характеристика товара, например, название.
+# Тогда значение — список значений-характеристик, например, список названий товаров.
+# Пример:
+#
+# {
+# “название”: [“компьютер”, “принтер”, “сканер”],
+# “цена”: [20000, 6000, 2000],
+# “количество”: [5, 2, 7],
+# “ед”: [“шт.”]
+# }
+products = []
+for i in range(1, 4):
+    print(f"Заполняем информацию по {i}-му товару")
+    name = input("Название: ")
+    price = int(input("Цена: "))
+    count = int(input("Количество: "))
+    pices =  input("Единица измерения: ")
+    products.append((i, {'название': name, 'цена': price, 'количество': count, 'eд': pices}))
+
+print(f"Исходный список товаров: \n{products}")
+
+product_names = []
+product_prices = []
+product_counts = []
+product_measures = []
+for i in products:
+    product_names.append(i[1].get('название'))
+    product_prices.append(i[1].get('цена'))
+    product_counts.append(i[1].get('количество'))
+    product_measures.append(i[1].get('eд'))
+
+report = {
+    'название': list(set(product_names)),
+    'цена': list(set(product_prices)),
+    'количество': list(set(product_counts)),
+    'eд': list(set(product_measures))
+}
+
+print(f"Отчет по списку товаров: \n{report}")
+© 2022 GitHub, Inc.
+Terms
+Privacy
+
Index: text_5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/text_5.py b/text_5.py
new file mode 100644
--- /dev/null	(date 1645818311672)
+++ b/text_5.py	(date 1645818311672)
@@ -0,0 +1,8 @@
+# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
+# У пользователя нужно запрашивать новый элемент рейтинга.
+# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
+# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
+# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
+# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
+# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
+# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
\ No newline at end of file
Index: text_4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/text_4.py b/text_4.py
new file mode 100644
--- /dev/null	(date 1645818311668)
+++ b/text_4.py	(date 1645818311668)
@@ -0,0 +1,3 @@
+# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
+# Вывести каждое слово с новой строки.
+# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.
\ No newline at end of file
Index: text_3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/text_3.py b/text_3.py
new file mode 100644
--- /dev/null	(date 1645818311662)
+++ b/text_3.py	(date 1645818311662)
@@ -0,0 +1,14 @@
+# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
+# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
+# Напишите решения через list и dict.
+
+seasons = {'Winter': (1, 2, 12),
+           'Sping': (3, 4, 5),
+           'Summer': (6, 7, 8),
+           'Autumn': (9, 10, 11)}
+
+month = int(input('Choose a month: '))
+for key in seasons.keys():
+    if month in seasons[key]:
+        print(key)
+
Index: new_1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/new_1.py b/new_1.py
new file mode 100644
--- /dev/null	(date 1645818311652)
+++ b/new_1.py	(date 1645818311652)
@@ -0,0 +1,10 @@
+n = int(input())
+for i in range(1, n + 1):
+    for j in range(i):
+        print(j + 1, end="")
+    for j in range(i, 1, -1):
+        print(j - 1, end="")
+    print("")
+
+# Дано натуральное число nn.
+# Напишите программу, которая печатает численный треугольник с высотой равной nn, в соответствии с примером:
\ No newline at end of file
Index: text_1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/text_1.py b/text_1.py
new file mode 100644
--- /dev/null	(date 1645819148496)
+++ b/text_1.py	(date 1645819148496)
@@ -0,0 +1,16 @@
+# Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
+# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
+# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
+from sys import argv
+
+
+print(argv)
+
+_, n_1, n_2, n_3 = argv
+print(n_1)
+print(n_2)
+print(n_3)
+
+int(n_1)*int(n_2)+int(n_3)
+print(int(n_1)*int(n_2)+int(n_3))
+
